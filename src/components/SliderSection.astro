---
import FeaturesCard from "./organism/FeaturesCard.astro";
import SectionTitle from "./molecules/SectionTitle.astro";
import LeftArrow from "./icons/LeftArrow.astro";
import RightArrow from "./icons/RightArrow.astro";

const { id, title, description, features } = Astro.props;
---
<section data-slider-root class={`slider-${id} flex flex-col overflow-hidden gap-8 mb-8 mt-6`}>
  <SectionTitle title={title} description={description} />

  <!-- añade clases genéricas "slides" y "slide" -->
  <div class={`slides flex gap-4`}>
    {features.map((feature: any) => (
      <FeaturesCard
        image={feature.image}
        description={feature.description}
        customClass={`slide`} 
      />
    ))}
  </div>

  <div class="controls flex gap-4 justify-end">
    <button class="btn-left flex items-center justify-center w-10 h-10 bg-[#151515] rounded-full transition duration-300" aria-label="Mostrar card anterior">
      <LeftArrow color="#444" />
    </button>
    <button class="btn-right flex items-center justify-center w-10 h-10 bg-[#333] rounded-full transition duration-300" aria-label="Mostrar card siguiente">
      <RightArrow color="#999" />
    </button>
  </div>

  <script>
    import gsap from "gsap";

    // Scope local: este script controla SOLO su propio <section data-slider-root>
    const root = document.currentScript.closest('[data-slider-root]');
    if (!root) return;

    const slides = root.querySelector('.slides');
    const slideEls = root.querySelectorAll('.slide');
    const btnLeft = root.querySelector('.btn-left');
    const btnRight = root.querySelector('.btn-right');

    // Colores/estados
    const availableClass = "bg-[#333]";
    const disableClass = "bg-[#151515]";
    const activeColor = "#999";
    const disableColor = "#444";
    const leftSvg  = btnLeft?.querySelector('svg');
    const rightSvg = btnRight?.querySelector('svg');

    let index = 0;
    const GAP = 16;
    const len = slideEls.length;

    const measure = () => slideEls[0]?.offsetWidth || 0;
    let slideWidth = measure();

    function update() {
      const move = -(index * (slideWidth + GAP));
      if (window.gsap) {
        gsap.to(slides, { x: move, duration: 0.3, ease: "power3.out" });
      } else {
        slides.style.transform = `translateX(${move}px)`;
      }

      // Estados de botones + color de flechas (si tus SVG usan currentColor, mejor usar clases de texto)
      if (index === 0) {
        btnLeft?.classList.remove(availableClass); btnLeft?.classList.add(disableClass);
        leftSvg?.setAttribute("color", disableColor);
      } else {
        btnLeft?.classList.remove(disableClass); btnLeft?.classList.add(availableClass);
        leftSvg?.setAttribute("color", activeColor);
      }

      if (index === len - 1) {
        btnRight?.classList.remove(availableClass); btnRight?.classList.add(disableClass);
        rightSvg?.setAttribute("color", disableColor);
      } else {
        btnRight?.classList.remove(disableClass); btnRight?.classList.add(availableClass);
        rightSvg?.setAttribute("color", activeColor);
      }
    }

    function next() { if (index < len - 1) { index++; update(); } }
    function prev() { if (index > 0)         { index--; update(); } }

    btnLeft?.addEventListener('click', prev);
    btnRight?.addEventListener('click', next);

    window.addEventListener('resize', () => { slideWidth = measure(); update(); });

    // Accesibilidad con teclado (opcional)
    root.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') next();
      if (e.key === 'ArrowLeft')  prev();
    });

    update();
  </script>
</section>
