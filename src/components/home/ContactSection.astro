---
import InterSectionText from "../molecules/InterSectionText.astro";
const email = "info@aciduslabs.com";


import { getLangFromUrl } from "../../i18n/utils";

interface ContactSection {
  interSectionText: InterSectionText;
  form: Form;
  additionalInfo: AdditionalInfo;
}

interface InterSectionText {
  title: string;
  classTitle: string;
  description: string;
  padding: string;
  classDesc: string;
}

interface Form {
  action: string;
  method: string;
  fields: FormField[];
  submitButton: SubmitButton;
}

interface FormField {
  label: string;
  for: string;
  type: "text" | "email" | "textarea";
  name: string;
  id: string;
  class: string;
  required: boolean;
  rows?: number; // only for textarea
}

interface SubmitButton {
  type: "submit";
  text: string;
  class: string;
}

interface AdditionalInfo {
  contactEmailText: string;
  contactEmailLink: ContactEmailLink;
  securityMessage: string;
  copyrightYear: string;
  copyrightText: string;
}

interface ContactEmailLink {
  href: string;
  ariaLabel: string;
  class: string;
  text: string;
}
interface IndexData {
  contactSection: ContactSection;
}

const lang = getLangFromUrl(Astro.url);
const allData = import.meta.glob<IndexData>("../../data/*/indexData.json", {
  eager: true,
});
const matchedEntry = Object.entries(allData).find(([path]) =>
  path.includes(`/${lang}/`)
);
const indexData = matchedEntry?.[1];
---

<section class="sectionContact mt-10" id="contactSection">
  <InterSectionText
    title={indexData?.contactSection?.interSectionText?.title ?? ""}
    classTitle={indexData?.contactSection?.interSectionText?.classTitle ?? ""}
    description={indexData?.contactSection?.interSectionText?.description ?? ""}
    padding={indexData?.contactSection?.interSectionText?.padding ?? ""}
    classDesc={indexData?.contactSection?.interSectionText?.classDesc ?? ""}
  />
  <div class="formContact">
    <form
      action={indexData?.contactSection?.form?.action ?? ""}
      method={indexData?.contactSection?.form?.method ?? "POST"}
      class="flex flex-col gap-6 mx-8"
    >
      {indexData?.contactSection?.form?.fields.map((field) => (
        <div class="flex flex-col gap-2">
          <label class="text-[#0075c8] px-2 text-lg font-light" for={field.for}>
            {field.label}
          </label>
          {field.type === "textarea" ? (
            <textarea
              name={field.name}
              id={field.id}
              class={field.class}
              rows={field.rows ?? 4}
              required={field.required}
            ></textarea>
          ) : (
            <input
              type={field.type}
              name={field.name}
              id={field.id}
              class={field.class}
              required={field.required}
            />
          )}
        </div>
      ))}
      <button
        type={indexData?.contactSection?.form?.submitButton.type ?? "submit"}
        class={indexData?.contactSection?.form?.submitButton.class ?? ""}
      >
        {indexData?.contactSection?.form?.submitButton.text ?? ""}
      </button>
    </form>

    <p class="text-[#858585] text-center text-sm flex flex-col items-center font-light">
      {indexData?.contactSection?.additionalInfo?.contactEmailText}
      <a
        href={indexData?.contactSection?.additionalInfo?.contactEmailLink.href ?? "#"}
        aria-label={indexData?.contactSection?.additionalInfo?.contactEmailLink.ariaLabel ?? ""}
        class={indexData?.contactSection?.additionalInfo?.contactEmailLink.class ?? ""}
      >
        {indexData?.contactSection?.additionalInfo?.contactEmailLink.text ?? ""}
      </a>
    </p>

    <p class="text-center text-[#ddd] px-16 py-12 text-lg">
      {indexData?.contactSection?.additionalInfo?.securityMessage ?? ""}
    </p>

    <p class="flex justify-center flex-col md:flex-row text-center font-light text-sm text-[#858585] pt-4 pb-12">
      <span>{indexData?.contactSection?.additionalInfo?.copyrightYear ?? ""}</span> {indexData?.contactSection?.additionalInfo?.copyrightText}
  </div>
</section>

<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  let tl = gsap.timeline({
    scrollTrigger: {
      trigger: ".sectionContact",
      start: "top 80%",
      toggleActions: "restart none none reset",
    },
  });

  tl.from(".titleContact", {
    duration: 1,
    scale: 0.8,
    opacity: 0,
    ease: "sine.out",
  })
    .from(
      ".descContact",
      {
        duration: 1,
        scale: 0.9,
        opacity: 0,
        ease: "sine.out",
      },
      "-=.5"
    )
    .from(
      ".formContact",
      {
        duration: 1.2,
        y: 20,
        opacity: 0,
        ease: "sine.out",
      },
      "-=.5"
    );
</script>
