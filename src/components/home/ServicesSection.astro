---
import SectionTitle from "../molecules/SectionTitle.astro";

import ServiceCard from "../organism/ServiceCard.astro";
import landingPageCover from "../../images/service_landing_page.png";
import webAMedidaCover from "../../images/service-web-a-medida.png";
import eCommerceCover from "../../images/service-ecommerce.png";
import auditCover from "../../images/service-audit.png";
import PlayIcon from "../icons/PlayIcon.astro";
import PauseIcon from "../icons/PauseIcon.astro";
import ResetIcon from "../icons/ResetIcon.astro";
import CtaButton from "../atoms/CtaButton.astro";
---

<section class="sectionServices flex flex-col py-8 gap-6" id="serviceSection">
  <SectionTitle
    title="¿Qué puedo hacer por ti?"
    classTitle="titleServices"
    description="Sitios modernos, optimizados y adaptados a tus objetivos."
    classDesc="descServices"
  />
  <div class="slider px-6 gap-4 overflow-hidden max-w-screen">
    <div class="slides flex gap-4">
      <div class="slide">
        <ServiceCard
          title="Landing Pages de Alta Conversión"
          description="Creamos páginas de aterrizaje estratégicas diseñadas para un solo objetivo: convertir visitantes en clientes. Perfectas para campañas de marketing, lanzamiento de productos o promoción de servicios específicos."
          cover={landingPageCover}
          color="#006E83"
        />
      </div>
      <div class="slide">
        <ServiceCard
          title="Sitios Web a Medida"
          description="Desde portafolios que destacan tu trabajo hasta sitios corporativos que proyectan una presencia sólida y confiable. Diseñamos experiencias digitales completas que te diferencian de la competencia."
          cover={webAMedidaCover}
          color="#4B0A8C"
        />
      </div>
      <div class="slide">
        <ServiceCard
          title="Auditoría y Optimización Web"
          description="Tu sitio web no te representa o carga lento? Realizamos una auditoría completa para identificar cuellos de botella y lo transformamos para mejorar su velocidad, SEO y experiencia de usuario."
          cover={auditCover}
          color="#005649"
        />
      </div>
      <div class="slide">
        <ServiceCard
          title="E-commerce Básico"
          description="Desde portafolios que destacan tu trabajo hasta sitios corporativos que proyectan una presencia sólida y confiable. Diseñamos experiencias digitales completas que te diferencian de la competencia."
          cover={eCommerceCover}
          color="#4B0A8C"
        />
      </div>
    </div>
  </div>
  <div class="flex items-center justify-center gap-4">
    <div
      class="playBtn next flex items-center justify-center bg-[rgba(250,250,250,0.1)] w-14 h-14 rounded-full"
    >
      <PlayIcon />
    </div>
    <div
      class="ctrls flex items-center justify-center bg-[rgba(250,250,250,0.1)] h-14 rounded-full gap-4 px-6"
    >
      <div class="dotContainer relative overflow-hidden rounded-full">
        <div class="dotProgress absolute bg-[#ddd] w-0 h-2 rounded-full"></div>
        <div class="dotCtrl bg-[#aaa] w-8 h-2 rounded-full"></div>
      </div>
      <div class="dotContainer relative overflow-hidden rounded-full">
        <div class="dotProgress absolute bg-[#ddd] w-0 h-2 rounded-full"></div>
        <div class="dotCtrl bg-[#aaa] w-2 h-2 rounded-full"></div>
      </div>
      <div class="dotContainer relative">
        <div class="dotProgress absolute bg-[#ddd] w-0 h-2 rounded-full"></div>
        <div class="dotCtrl bg-[#aaa] w-2 h-2 rounded-full"></div>
      </div>
      <div class="dotContainer relative overflow-hidden rounded-full">
        <div class="dotProgress absolute bg-[#ddd] w-0 h-2 rounded-full"></div>
        <div class="dotCtrl bg-[#aaa] w-2 h-2 rounded-full"></div>
      </div>
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: ".sectionServices",
      start: "top 70%",
      toggleActions: "restart none none reset",
    },
  });

  tl.from(".titleServices", {
    opacity: 0,
    y: 20,
    duration: 1,
    ease: "sine.out",
  })
    .from(
      ".descServices",
      {
        opacity: 0,
        y: 20,
        duration: 1,
        ease: "sine.out",
      },
      "-=0.5"
    )
    .from(
      ".slides",
      {
        opacity: 0,
        y: 20,
        duration: 1,
        ease: "sine.out",
        onComplete: () => {
          playSlider();
          setPauseIcon();
        },
      },
      "-=0.5"
    );

  const slidesCount = document.querySelectorAll(".slide").length;
  const slide = document.querySelector(".slide") as HTMLElement;
  const slideWidth = slide?.offsetWidth ?? 0;

  const ctrls = document.querySelectorAll(".dotCtrl");
  const ctrlsProgress = document.querySelectorAll(".dotProgress");

  let index = 0;

  const tlSlides = gsap.timeline({ paused: true, repeat: 0 });
  const tlCtrls = gsap.timeline({ paused: true, repeat: 0 });
  const tlCtrlsProgress = gsap.timeline({ paused: true, repeat: 0 });

  function playSlider() {
    tlSlides.clear();
    tlCtrls.clear();
    tlCtrlsProgress.clear(); // limpia la timeline para reiniciar animación
    index = 0;

    for (let i = 0; i < slidesCount; i++) {
      const startTIme = i * 5;

      tlSlides.to(
        ".slides",
        {
          x: -(slideWidth + 16) * i,
          duration: 0.8,
          ease: "power3.Out",
          //delay: i === 0 ? 0 : 5, // primer slide sin delay, luego 5s antes de cada slide
          onStart: () => (index = i),
        },
        startTIme
      );
      tlCtrls.to(
        ctrls[i],
        {
          width: "32px",
          duration: 0.8,
          ease: "power3.out",
        },
        startTIme
      );
      if (i > 0) {
        tlCtrls.to(
          ctrls[i - 1],
          {
            width: "8px",
            duration: 0.8,
            ease: "power3.out",
          },
          startTIme
        );
        tlCtrlsProgress.to(
          ctrlsProgress[i - 1],
          {
            width: "0",
            duration: 0.8,
            ease: "power3.out",
          },
          startTIme
        );
      }
      tlCtrlsProgress.to(
        ctrlsProgress[i],
        {
          width: "32px",
          duration: 5,
          ease: "power3.out",
        },
        startTIme
      );
    }

    tlSlides.eventCallback("onComplete", () => {
      console.log("🎉 Animación finalizada");
      setResetIcon(); // o tu lógica personalizada
    });

    tlSlides.play();
    tlCtrls.play();
    tlCtrlsProgress.play();
  }

  // buttons
  const iconSlot = document.querySelector(".playBtn");
  function setPlayIcon() {
    iconSlot.innerHTML = `<svg
  xmlns="http://www.w3.org/2000/svg"
  width="24"
  height="24"
  viewBox="0 0 24 24"
  fill="white"
  class="icon icon-tabler icons-tabler-filled icon-tabler-player-play"
  ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
    d="M6 4v16a1 1 0 0 0 1.524 .852l13 -8a1 1 0 0 0 0 -1.704l-13 -8a1 1 0 0 0 -1.524 .852z"
  ></path></svg
>`;
  }
  function setPauseIcon() {
    iconSlot.innerHTML = `<svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="white"
        class="icon icon-tabler icons-tabler-filled icon-tabler-player-pause"
      >
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path d="M9 4h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h2a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2z"></path>
        <path d="M17 4h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h2a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2z"></path>
      </svg>`;
  }
  function setResetIcon() {
    iconSlot.innerHTML = `<svg
  xmlns="http://www.w3.org/2000/svg"
  width="24"
  height="24"
  viewBox="0 0 24 24"
  fill="none"
  stroke="white"
  stroke-width="2"
  stroke-linecap="round"
  stroke-linejoin="round"
  class="icon icon-tabler icons-tabler-outline icon-tabler-rotate"
  ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
    d="M19.95 11a8 8 0 1 0 -.5 4m.5 5v-5h-5"></path></svg
>`;
  }

  document.querySelector(".playBtn")?.addEventListener("click", () => {
    if (tlSlides.isActive()) {
      tlSlides.pause();
      tlCtrls.pause();
      tlCtrlsProgress.pause();
      setPlayIcon();
    } else if (tlSlides.progress() === 1) {
      // Mover las slides al inicio
      gsap.to(".slides", {
        x: 0,
        duration: 2,
        ease: "power3.out",
      });

      // Crear timeline de reversa para los dots
      const reverseDots = gsap.timeline({ paused: false });

      for (let i = slidesCount - 1; i > 0; i--) {
        const delay = (slidesCount - 1 - i) * 0.8;

        reverseDots.to(
          ctrls[i],
          {
            width: "8px",
            duration: 0.4,
            ease: "power3.out",
          },
          delay
        );

        reverseDots.to(
          ctrls[i - 1],
          {
            width: "32px",
            duration: 0.4,
            ease: "power3.out",
          },
          delay
        );

        reverseDots.to(
          ctrlsProgress[i],
          {
            width: 0,
            duration: 0.4,
            ease: "power3.out",
          },
          delay
        );
      }

      // Al terminar la animación de reversa, reiniciar las timelines
      reverseDots.eventCallback("onComplete", () => {
        tlSlides.restart();
        tlCtrls.restart();
        tlCtrlsProgress.restart();
        setPauseIcon();
      });
    } else {
      tlSlides.play();
      tlCtrls.play();
      tlCtrlsProgress.play();
      setPauseIcon();
    }
  });
</script>
