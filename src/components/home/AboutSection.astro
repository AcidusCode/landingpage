---
import InterSectionText from "../molecules/InterSectionText.astro";
import PhilosophyCard from "../organism/PhilosophyCard.astro";

import BrushIcon from "../icons/myprocess/BrushIcon.astro";
import PeopleIcon from "../icons/myprocess/PeopleIcon.astro";
import LensIcon from "../icons/myprocess/LensIcon.astro";

import HighLightCard from "../organism/HighLightCard.astro";
import laptopEmoji from "../../images/Emojis/laptop.png";
import RocketIcon from "../icons/RocketIcon.astro";

import CtaButton from "../atoms/CtaButton.astro";

import { getLangFromUrl } from "../../i18n/utils";

interface IndexData {
  about: {
    title: string;
    subtitle: string;
    titleClass: string;
    subtitleClass: string;
    padding: string,
    philosophy: {
      card1: {
        title: string;
        description: string;
      };
      card2: {
        title: string;
        description: string;
      };
      card3: {
        title: string;
        description: string;
      };
    };
    highlightCard: {
      heading: string;
      subheading: string;
      color: string;
      textAlign: string;
    };
    cta: string;
    ctaColor: string;
  };
}

const lang = getLangFromUrl(Astro.url);
const allData = import.meta.glob<IndexData>("../../data/*/indexData.json", {
  eager: true,
});
const matchedEntry = Object.entries(allData).find(([path]) =>
  path.includes(`/${lang}/`)
);
const indexData = matchedEntry?.[1];

const title = indexData?.about?.title;
const titleClass = indexData?.about?.titleClass;
const subtitle = indexData?.about?.subtitle;
const subtitleClass = indexData?.about?.subtitleClass;
const padding = indexData?.about?.padding;
const philosophy = {
  card1: {
    title: indexData?.about?.philosophy?.card1.title,
    description: indexData?.about?.philosophy?.card1.description
  },
  card2: {
    title: indexData?.about?.philosophy?.card2.title,
    description: indexData?.about?.philosophy?.card2.description
  },
  card3: {
    title: indexData?.about?.philosophy?.card3.title,
    description: indexData?.about?.philosophy?.card3.description
  },
}
const highlightCard = {
  heading: indexData?.about?.highlightCard?.heading,
  subheading: indexData?.about?.highlightCard?.subheading,
  color: indexData?.about?.highlightCard?.color,
  textAlign: indexData?.about?.highlightCard?.textAlign
}
const cta = indexData?.about?.cta;
const ctaColor = indexData?.about?.ctaColor;
---

<section class="sectionAbout md:pt-16" id="aboutSection">
  <InterSectionText
    title={title}
    classTitle={titleClass}
    description={subtitle}
    classDesc={subtitleClass}
    padding={padding}
  />
  <div class="aboutme flex flex-col gap-16 pb-16 md:flex-row">
    <PhilosophyCard
      icon={BrushIcon}
      title={philosophy.card1.title}
      description={philosophy.card1.description}
    />
    <PhilosophyCard
      icon={PeopleIcon}
      title={philosophy.card2.title}
      description={philosophy.card2.description}
    />
    <PhilosophyCard
      icon={LensIcon}
      title={philosophy.card3.title}
      description={philosophy.card3.description}
    />
  </div>
  <div class="mx-8 flex flex-col gap-8 md:items-center">
    <HighLightCard
      heading={highlightCard.heading}
      description={highlightCard.subheading}
      tag={false}
      color={highlightCard.color}
      cover={laptopEmoji}
      footer={false}
      textAlign={highlightCard.textAlign}
    />
    <div class="flex justify-center">
      <CtaButton
        text={cta}
        ariaLabel={cta}
        icon={RocketIcon}
        color={ctaColor}
      />
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  let tl = gsap.timeline({
    scrollTrigger: {
      trigger: ".sectionAbout",
      start: "top 80%",
      toggleActions: "restart none none reset",
    },
  });

  tl.from(".titleAbout", {
    duration: 1,
    scale: 0.8,
    opacity: 0,
    ease: "sine.out",
  })
    .from(
      ".descAbout",
      {
        duration: 1,
        scale: 0.9,
        opacity: 0,
        ease: "sine.out",
      },
      "-=.5"
    )
    .from(
      ".aboutme",
      {
        duration: 1.2,
        y: 20,
        opacity: 0,
        ease: "sine.out",
      },
      "-=.5"
    );
</script>
