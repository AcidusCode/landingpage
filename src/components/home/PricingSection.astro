---
import CtaButton from "../atoms/CtaButton.astro";
import InterSectionText from "../molecules/InterSectionText.astro";
import PricingCard from "../organism/PricingCard.astro";
import PricingFeature from "../molecules/PricingFeature.astro";

import { getLangFromUrl } from "../../i18n/utils";

interface PricingCard {
  packName: string;
  packDescription: string;
  packPrice: string;
  packCta: string;
  packNote: string;
  ctaColor?: string;
  colorStyle?: string;
  scaleStyle?: string;
  tag?: string;
  features: string[];
}

interface InterSectionText {
  title: string;
  classTitle: string;
  description: string;
  classDesc: string;
  padding: string;
}

interface PricingSection {
  interSectionText: InterSectionText;
  cards: {
    card1: PricingCard;
    card2: PricingCard;
    card3: PricingCard;
    // Puedes añadir más tarjetas si fuera necesario
  };
}

interface IndexData {
  pricing: PricingSection;
}

const lang = getLangFromUrl(Astro.url);
const allData = import.meta.glob<IndexData>("../../data/*/indexData.json", {
  eager: true,
});
const matchedEntry = Object.entries(allData).find(([path]) =>
  path.includes(`/${lang}/`)
);
const indexData = matchedEntry?.[1];
---

<section class="pricingSection mx-6 mt-16 flex flex-col gap-4 md:gap-12 md:pt-16" id="pricingSection">
  <InterSectionText
    title={indexData?.pricing?.interSectionText.title}
    classTitle={indexData?.pricing?.interSectionText.classTitle}
    description={indexData?.pricing?.interSectionText.description}
    classDesc={indexData?.pricing?.interSectionText.classDesc}
    padding={indexData?.pricing?.interSectionText.padding}
  />
  <div class="flex pricingCards flex-col items-center justify-center gap-12 md:flex-row">
    {indexData?.pricing &&
      Object.entries(indexData.pricing.cards).map(([key, card]) => (
        <PricingCard
          key={key}
          packName={card.packName}
          packDescription={card.packDescription}
          packPrice={card.packPrice}
          packCta={card.packCta}
          ctaColor={card.ctaColor}
          packNote={card.packNote}
          colorStyle={card.colorStyle}
          scaleStyle={card.scaleStyle}
          tag={card.tag}
        >
          {card.features.map((feature, i) => (
            <PricingFeature key={i} featureText={feature} />
          ))}
        </PricingCard>
      ))}
  </div>
</section>

<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: ".pricingSection",
      start: "top 70%",
      toggleActions: "restart none none reset",
    },
  });

  tl.from(".titlePricing", {
    opacity: 0,
    scale: 0.8,
    duration: 1,
    ease: "sine.out",
  }).from(
    ".descPricing",
    {
      opacity: 0,
      scale: 0.9,
      duration: 1,
      ease: "sine.out",
    },
    "-=0.5"
  ).from(
    ".pricingCards",
    {
      opacity: 0,
      y: 20,
      duration: 1,
      ease: "sine.out",
    },
    "-=0.5"
  );;
</script>