---
import InterSectionText from "../../components/molecules/InterSectionText.astro";
import CtaButton from "../atoms/CtaButton.astro";

import step1 from "../../images/myprocess/step-one.png";
import step2 from "../../images/myprocess/step-two.png";
import step3 from "../../images/myprocess/step-three.png";
import step4 from "../../images/myprocess/step-four.png";
import MyProcessCard from "../organism/MyProcessCard.astro";

import { getLangFromUrl } from "../../i18n/utils";

interface IndexData {
  designProcess: {
    title: string;
    subtitle: string;
    titleClass: string;
    subtitleClass: string;
    cta: string;
    steps: {
      step1: {
        stepName: string,
        title: string,
        description: string,
        color: string,
      };
      step2: {
        stepName: string,
        title: string,
        description: string,
        color: string,
      };
      step3: {
        stepName: string,
        title: string,
        description: string,
        color: string,
      };
      step4: {
        stepName: string,
        title: string,
        description: string,
        color: string,
      };
    };
  };
}

const lang = getLangFromUrl(Astro.url);
const allData = import.meta.glob<IndexData>("../../data/*/indexData.json", {
  eager: true,
});
const matchedEntry = Object.entries(allData).find(([path]) =>
  path.includes(`/${lang}/`)
);
const indexData = matchedEntry?.[1];

const title = indexData?.designProcess?.title;
const titleClass = indexData?.designProcess?.titleClass;
const subtitle = indexData?.designProcess?.subtitle;
const subtitleClass = indexData?.designProcess?.subtitleClass;
const cta = indexData?.designProcess?.cta;
const steps = {
  step1: {
    stepName: indexData?.designProcess?.steps?.step1?.stepName,
    title: indexData?.designProcess?.steps?.step1?.title,
    description: indexData?.designProcess?.steps?.step1?.description,
    color: indexData?.designProcess?.steps?.step1?.color,
  },
  step2: {
    stepName: indexData?.designProcess?.steps?.step2?.stepName,
    title: indexData?.designProcess?.steps?.step2?.title,
    description: indexData?.designProcess?.steps?.step2?.description,
    color: indexData?.designProcess?.steps?.step2?.color,
  },
  step3: {
    stepName: indexData?.designProcess?.steps?.step3?.stepName,
    title: indexData?.designProcess?.steps?.step3?.title,
    description: indexData?.designProcess?.steps?.step3?.description,
    color: indexData?.designProcess?.steps?.step3?.color,
  },
  step4: {
    stepName: indexData?.designProcess?.steps?.step4?.stepName,
    title: indexData?.designProcess?.steps?.step4?.title,
    description: indexData?.designProcess?.steps?.step4?.description,
    color: indexData?.designProcess?.steps?.step4?.color,
  }
}
---

<section class="sectionMyProcess md:pt-16" id="myproccessSection">
  <InterSectionText
    title={title}
    classTitle={titleClass}
    description={subtitle}
    classDesc={subtitleClass}
  />
  <div class="myprocess flex flex-col gap-18">
    <MyProcessCard
      step={steps.step1.stepName}
      title={steps.step1.title}
      description={steps.step1.description}
      image={step1}
    />
    <MyProcessCard
      step={steps.step2.stepName}
      title={steps.step2.title}
      description={steps.step2.description}
      color={steps.step2.color}
      image={step2}
    />
    <MyProcessCard
      step={steps.step3.stepName}
      title={steps.step3.title}
      description={steps.step3.description}
      color={steps.step3.color}
      image={step3}
    />
    <MyProcessCard
      step={steps.step4.stepName}
      title={steps.step4.title}
      description={steps.step4.description}
      color={steps.step4.color}
      image={step4}
    />
  </div>
  <div class="flex justify-center mt-8 mb-12">
    <CtaButton
      text={cta}
      ariaLabel={cta}
      color="#8100B1"
    />
  </div>
</section>

<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  let tl = gsap.timeline({
    scrollTrigger: {
      trigger: ".sectionMyProcess",
      start: "top 80%",
      toggleActions: "restart none none reset",
    },
  });

  tl.from(".titleMyProcess", {
    duration: 1,
    scale: 0.8,
    opacity: 0,
    ease: "sine.out",
  }).from(
    ".descMyProcess",
    {
      duration: 1,
      scale: 0.9,
      opacity: 0,
      ease: "sine.out",
    },
    "-=.5"
  ).from(
    ".myprocess",
    {
      duration: 1.2,
      y: 20,
      opacity: 0,
      ease: "sine.out",
    },
    "-=.5"
  );
</script>
