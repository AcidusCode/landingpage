---
import InterSectionText from "../molecules/InterSectionText.astro";
import ProjectCard from "../organism/ProjectCard.astro";
import CtaButton from "../atoms/CtaButton.astro";
import CentoApp from "../projects/centoApp.astro";

import centoCover from "../../images/Mask group.png";
import centoIntro from "../../images/centoapp/render_intro.png";
import CentoAppIcon from "../projects/centoapp/CentoAppIcon.astro";
import { getLangFromUrl } from "../../i18n/utils";

interface IndexData {
  projects: {
    title: string;
    titleClass: string;
    subtitle: string;
    subtitleClass: string;
    padding: string;
    cta: string;
    project1: {
      title: string;
      subtitle: string;
      heading: string;
      subheading: string;
      tag: string;
      color: string;
      cover: string;
      icon: string;
      cta: string;
    };
  };
}

const lang = getLangFromUrl(Astro.url);
const allData = import.meta.glob<IndexData>("../../data/*/indexData.json", {
  eager: true,
});
const matchedEntry = Object.entries(allData).find(([path]) =>
  path.includes(`/${lang}/`)
);
const indexData = matchedEntry?.[1];

const title = indexData?.projects?.title;
const titleClass = indexData?.projects?.titleClass;
const subtitle = indexData?.projects?.subtitle;
const subtitleClass = indexData?.projects?.subtitleClass;
const padding = indexData?.projects?.padding;
const cta = indexData?.projects?.cta;

const projects = {
  title: indexData?.projects?.project1?.title,
  subtitle: indexData?.projects?.project1?.subtitle,
  heading: indexData?.projects?.project1?.heading,
  subheading: indexData?.projects?.project1?.subheading,
  tag: indexData?.projects?.project1?.tag,
  color: indexData?.projects?.project1?.color,
  cta: indexData?.projects?.project1?.cta,
}
---

<section
  class="sectionProjects flex flex-col py-8 gap-6 md:items-center md:pt-16"
  id="projectSection"
>
  <InterSectionText
    title={title}
    classTitle={titleClass}
    description={subtitle}
    classDesc={subtitleClass}
    padding={padding}
  />
  <div class="cardProjects flex px-6 w-full justify-center">
    <ProjectCard
      id="projectCard"
      title={projects.title}
      subtitle={projects.subtitle}
      heading={projects.heading}
      description={projects.subheading}
      tag={projects.tag}
      color={projects.color}
      cover={centoCover}
      icon={CentoAppIcon}
      projectCta={projects.cta}
    />
  </div>
  <div class="flex justify-center">
    <CtaButton
      text={cta}
      ariaLabel={cta}
      color="#5105B5"
    />
  </div>
</section>

<div
  id="project-overlay"
  class="hidden fixed pt-0 top-0 left-0 right-0 bottom-0 bg-[rgba(0,0,0,.5)] z-150 flex items-center justify-center backdrop-blur-xl md:pt-[5vh]"
>
  <div
    id="project-content"
    class="relative h-[100%] bg-[#202020] max-h-[100%] overflow-y-auto flex flex-col md:max-w-[800px] md:max-h-[95vh] md:rounded-t-3xl translate-y-full"
  >
    <div
      class="sticky top-4 z-155 w-full flex md:max-w-[800px] md:rounded-t-3xl"
    >
      <button
        id="close-overlay"
        class="absolute glass-effect right-4 text-right text-sm text-gray-500 bg-[#404040] p-4 rounded-full h-14 w-14"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="white"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="icon icon-tabler icons-tabler-outline icon-tabler-x"
          ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
            d="M18 6l-12 12"></path><path d="M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div id="project-details">
      <!-- Aquí se inyectará el contenido del caso -->
      <CentoApp />
    </div>
  </div>
</div>

<script>
  import "../../scripts/overlayProject.js";
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: ".sectionProjects",
      start: "top 80%",
      toggleActions: "restart none none reset",
    },
  });

  tl.from(".titleProjects", {
    opacity: 0,
    scale: 0.8,
    duration: 1,
    ease: "sine.out",
  })
    .from(
      ".descProjects",
      {
        opacity: 0,
        scale: 0.9,
        duration: 1,
        ease: "sine.out",
      },
      "-=0.5"
    )
    .from(
      ".cardProjects",
      {
        opacity: 0,
        y: 20,
        duration: 1,
        ease: "sine.out",
      },
      "-=0.5"
    );
</script>
